(async function automateASKPortal() {
    // To stop automation: window.__ASK_AUTOMATION_STOP = true
    window.__ASK_AUTOMATION_STOP = window.__ASK_AUTOMATION_STOP || false;

    const delay = ms => new Promise(res => setTimeout(res, ms));

    function randomText(len = 6) {
        const chars = "abcdefghijklmnopqrstuvwxyz";
        return Array.from({ length: len }, () => chars[Math.floor(Math.random() * chars.length)]).join("");
    }

    function isVisible(el) {
        if (!el || !el.getBoundingClientRect) return false;
        try {
            const style = window.getComputedStyle(el);
            const r = el.getBoundingClientRect();
            return style && style.visibility !== "hidden" && style.display !== "none" &&
                   r.width > 2 && r.height > 2 && r.bottom > 0 && r.right > 0;
        } catch (e) { return false; }
    }

    function dispatchClick(el) {
        if (!el) return;
        ["mouseover","mousemove","mousedown","mouseup","click"].forEach(name =>
            el.dispatchEvent(new MouseEvent(name, { bubbles:true, cancelable:true, view:window }))
        );
    }

    async function waitFor(condFn, description) {
        console.log(`‚è≥ waiting for ${description}...`);
        while (!window.__ASK_AUTOMATION_STOP) {
            try {
                const v = condFn();
                if (v) {
                    console.log(`‚úÖ found ${description}`);
                    return v;
                }
            } catch(e){}
            await delay(800);
        }
        throw new Error("Stopped by user");
    }

    function findSearchInput() {
        const tries = [
            "input[placeholder*='How can I help' i]",
            "input[placeholder*='help' i]",
            "input[type='search']",
            "input[aria-label*='search' i]",
            "input[role='search']",
            "input"
        ];
        for (const sel of tries) {
            const el = document.querySelector(sel);
            if (el && isVisible(el)) return el;
        }
        return Array.from(document.querySelectorAll("input")).find(i => isVisible(i)) || null;
    }

    function findThreeLineButtonNear(searchInput) {
        const container = searchInput ? (searchInput.closest("form, header, div, .search, .search-bar, .input-group") || document) : document;
        const candidates = Array.from(container.querySelectorAll("button, [role='button'], a")).filter(isVisible);
        const hintRE = /‚ò∞|‚â°|hamburg|hamburger|menu|filter|sidebar|open nav|toggle/i;
        const exact = candidates.find(el => hintRE.test((el.innerText || "") + (el.getAttribute("aria-label") || "") + (el.title || "")));
        if (exact) return exact;
        const svgCandidate = candidates.find(el => el.querySelector && el.querySelector("svg"));
        if (svgCandidate) return svgCandidate;
        return candidates[0] || Array.from(document.querySelectorAll("button, [role='button'], a")).filter(isVisible)[0] || null;
    }

    function findLocationControlWithIndia() {
        // 1) Native select
        const selects = Array.from(document.querySelectorAll("select")).find(s => Array.from(s.options).some(o => /india/i.test(o.text)));
        if (selects) return selects;

        // 2) Label or nearby element with location text
        const labels = Array.from(document.querySelectorAll("label, div, span")).filter(el => /location/i.test(el.innerText || ""));
        for (const lbl of labels) {
            const next = lbl.nextElementSibling;
            if (next && [...next.querySelectorAll("*")].some(ch => /india/i.test(ch.innerText || ""))) return next;
            const parent = lbl.parentElement;
            if (parent && parent !== document && [...parent.querySelectorAll("*")].some(ch => /india/i.test(ch.innerText || ""))) return parent;
        }

        // 3) Fallback: any visible element containing 'India'
        return [...document.querySelectorAll("button, li, div, a, span, option")].find(el => isVisible(el) && /(^|\s)india(\s|$)/i.test(el.innerText || "")) || null;
    }

    function findSearchButtonNearInput(searchInput) {
        if (!searchInput) return null;
        const container = searchInput.closest("form, .search, .search-bar, .input-group") || document;
        const btns = Array.from(container.querySelectorAll("button, a")).filter(isVisible);
        const byLabel = btns.find(b => /search|find|go|magnif/i.test((b.getAttribute("aria-label")||"") + (b.title||"") + (b.innerText||"")));
        if (byLabel) return byLabel;
        const svgBtn = btns.find(b => b.querySelector && b.querySelector("svg"));
        if (svgBtn) return svgBtn;
        return btns[0] || Array.from(document.querySelectorAll("button, a")).filter(isVisible)[0] || null;
    }

    function findFirstSearchResultElement() {
        const selectors = [".result-item", ".list-item", ".card", ".search-result", ".result", "article", "li a", "a[href]", "h3"];
        for (const sel of selectors) {
            const els = Array.from(document.querySelectorAll(sel)).filter(el => isVisible(el) && ((el.innerText||"").trim().length>0));
            if (els.length) { els.sort((a,b)=>a.getBoundingClientRect().top-b.getBoundingClientRect().top); return els[0]; }
        }
        return Array.from(document.querySelectorAll("a[href]")).filter(el => isVisible(el) && ((el.innerText||"").trim().length>0))[0] || null;
    }

    function findAskLogoTopLeft() {
        const candidates = Array.from(document.querySelectorAll("a, button, img, div, span")).filter(isVisible)
            .filter(el => { const r = el.getBoundingClientRect(); return r.top < 140 && r.left < 260; });
        const exact = candidates.find(el => /^\s*ASK\s*$/i.test((el.innerText||"")) || /ask/i.test((el.getAttribute("alt")||"") + (el.title||"")));
        return exact || candidates[0] || null;
    }

    // MAIN LOOP
    try {
        while (!window.__ASK_AUTOMATION_STOP) {
            try {
                const searchInput = await waitFor(() => findSearchInput(), "search input");

                // 1) Click 3-line button first
                const threeLineBtn = await waitFor(() => findThreeLineButtonNear(searchInput), "3-line (hamburger) button");
                dispatchClick(threeLineBtn);
                console.log("‚ò∞ Clicked 3-line button");
                await delay(1500);

                // 2) Type random text
                try { searchInput.focus(); } catch(e){}
                const text = randomText(6);
                searchInput.value = "";
                for (const ch of text) { searchInput.value+=ch; searchInput.dispatchEvent(new Event("input",{bubbles:true})); await delay(120); }
                console.log("‚å®Ô∏è Typed:", text);
                await delay(1500);

                // 3) Select location -> India
                const locationControl = await waitFor(() => findLocationControlWithIndia(), "location control / India option");
                if(locationControl) {
                    if(locationControl.tagName && locationControl.tagName.toLowerCase() === "select") {
                        const opt = Array.from(locationControl.options).find(o=>/india/i.test(o.text));
                        if(opt){ locationControl.value = opt.value; locationControl.dispatchEvent(new Event("change",{bubbles:true})); console.log("üåç Set native select to India"); }
                    } else {
                        dispatchClick(locationControl); // open custom dropdown
                        await delay(800);
                        const indiaOpt = await waitFor(()=>[...document.querySelectorAll("li, div, button, a, span")].find(el=>isVisible(el)&&/(^|\s)india(\s|$)/i.test(el.innerText||"")), "India option in dropdown");
                        dispatchClick(indiaOpt);
                        console.log("üåç Clicked India in custom dropdown");
                        await delay(500);
                    }
                } else console.warn("‚ö†Ô∏è Could not find location control");

                // 4) Click search button (optional)
                const searchBtn = findSearchButtonNearInput(searchInput);
                if(searchBtn){ dispatchClick(searchBtn); console.log("üîç Clicked search button"); }
                await delay(1500);

                // 5) Click first search result
                const firstResult = await waitFor(()=>findFirstSearchResultElement(), "first search result");
                dispatchClick(firstResult);
                console.log("üìë Clicked first search result");
                await delay(2000);

                // 6) Click ASK logo to return home
                const askLogo = await waitFor(()=>findAskLogoTopLeft(), "ASK logo (top-left)");
                dispatchClick(askLogo);
                console.log("üè† Clicked ASK logo (home)");
                await delay(1500);

            } catch(innerErr){ console.error("Loop error:", innerErr); await delay(2000); }
        }
    } catch(err){ console.error("Automation stopped:", err); }
})();
