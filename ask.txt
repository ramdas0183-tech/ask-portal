(async function() {
  // stop flag (set to true to stop)
  window.__ASK_AUTOMATION_STOP = window.__ASK_AUTOMATION_STOP || false;

  const delay = ms => new Promise(res => setTimeout(res, ms));

  function randomText(length = 6) {
    const chars = "abcdefghijklmnopqrstuvwxyz";
    return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join("");
  }

  function isVisible(el) {
    if (!el || !el.getBoundingClientRect) return false;
    const r = el.getBoundingClientRect();
    return r.width > 2 && r.height > 2 && r.bottom > 0 && r.right > 0;
  }

  function clickEl(el) {
    if (!el) return;
    ["mouseover","mousedown","mouseup","click"].forEach(name =>
      el.dispatchEvent(new MouseEvent(name, { bubbles: true, cancelable: true, view: window }))
    );
  }

  async function waitFor(fn, desc) {
    console.log(`‚è≥ waiting for ${desc}...`);
    while (!window.__ASK_AUTOMATION_STOP) {
      try {
        const v = fn();
        if (v) {
          console.log(`‚úÖ found ${desc}`);
          return v;
        }
      } catch (e) {}
      await delay(1000);
    }
    throw new Error("Stopped by user");
  }

  function findSearchInput() {
    const tries = [
      "input[placeholder*='How can I help']",
      "input[placeholder*='help']",
      "input[type='search']",
      "input[aria-label*='search']",
      "input[role='search']",
      "input"
    ];
    for (const s of tries) {
      const el = document.querySelector(s);
      if (el && isVisible(el)) return el;
    }
    return null;
  }

  // üîß FIXED function for 3-line (hamburger/filter) button
  function findFilterButtonNear(input) {
    if (!input) return null;
    const inputRect = input.getBoundingClientRect();

    const container = input.closest("form, .search, .search-bar, .input-group, header, .top") || document;
    const candidates = Array.from(container.querySelectorAll("button, a, [role='button'], div")).filter(isVisible);

    // Prefer buttons just left of input
    const leftCandidates = candidates.filter(c => {
      const r = c.getBoundingClientRect();
      return r.right <= inputRect.left + 80; // allow some tolerance
    });

    if (leftCandidates.length) {
      return leftCandidates.sort((a, b) => a.getBoundingClientRect().left - b.getBoundingClientRect().left)[0];
    }

    // Fallback: text/aria-label/title check
    const fallback = candidates.find(el =>
      /filter|menu|hamburg|‚ò∞/i.test(
        (el.getAttribute("aria-label") || "") +
        (el.title || "") +
        (el.innerText || "")
      )
    );
    return fallback || null;
  }

  function findRightSideSearchButton(input) {
    const inputRect = input.getBoundingClientRect();
    const container = input.closest("form, .search, .search-bar, .input-group") || document;
    const btns = Array.from(container.querySelectorAll("button, a")).filter(isVisible);
    const right = btns.filter(b => b.getBoundingClientRect().left >= inputRect.right - 10);
    if (right.length) return right[0];
    const searchBtn = btns.find(b => /search|find|go|magnif/i.test((b.getAttribute("aria-label")||"") + (b.title||"") + (b.innerText||"")));
    if (searchBtn) return searchBtn;
    return btns.find(b => b.querySelector && b.querySelector("svg")) || null;
  }

  function findLocationSelectOrCustom() {
    const selects = Array.from(document.querySelectorAll("select")).filter(s =>
      Array.from(s.options).some(o => /india/i.test(o.text))
    );
    if (selects.length) return selects[0];
    const labels = Array.from(document.querySelectorAll("label, div, span")).filter(el => /location/i.test(el.innerText));
    for (const lbl of labels) {
      const next = lbl.nextElementSibling;
      if (!next) continue;
      if (Array.from(next.querySelectorAll("*")).some(ch => /india/i.test(ch.innerText || ""))) {
        return next;
      }
    }
    const items = Array.from(document.querySelectorAll("div, li, button")).find(el => /india/i.test(el.innerText || ""));
    return items || null;
  }

  try {
    while (!window.__ASK_AUTOMATION_STOP) {
      // 1. Wait & type into search input
      const searchInput = await waitFor(() => findSearchInput(), "search input");
      searchInput.focus();
      const text = randomText(6);
      searchInput.value = "";
      for (const ch of text) {
        searchInput.value += ch;
        searchInput.dispatchEvent(new Event("input", { bubbles: true }));
        searchInput.dispatchEvent(new KeyboardEvent("keydown", { key: ch, bubbles: true }));
        await delay(150);
      }
      console.log("‚å®Ô∏è typed:", text);
      await delay(3000);

      // 2. Find & click the 3-line button
      const filterBtn = await waitFor(() => findFilterButtonNear(searchInput), "3-line (filter) button");
      clickEl(filterBtn);
      console.log("‚öôÔ∏è clicked filter button");
      await delay(3000);

      // 3. Select India
      const locationControl = await waitFor(() => findLocationSelectOrCustom(), "location dropdown/control (India)");
      if (locationControl.tagName && locationControl.tagName.toLowerCase() === "select") {
        const opt = Array.from(locationControl.options).find(o => /india/i.test(o.text));
        if (opt) {
          locationControl.value = opt.value;
          locationControl.dispatchEvent(new Event("change", { bubbles: true }));
          console.log("üåç set native select to India");
        }
      } else {
        clickEl(locationControl);
        await delay(500);
        const opt = Array.from(document.querySelectorAll("div, li, button, span")).find(el => /india/i.test(el.innerText || ""));
        if (opt) {
          clickEl(opt);
          console.log("üåç clicked India in custom dropdown");
        } else {
          console.log("‚ö†Ô∏è Could not find 'India' option");
        }
      }
      await delay(3000);

      // 4. Click search button
      const searchBtn = await waitFor(() => findRightSideSearchButton(searchInput), "search (magnifier) button");
      clickEl(searchBtn);
      console.log("üîç clicked search");
      await delay(3000);

      // 5. Click first result
      const firstResult = await waitFor(() => {
        const selectors = [".result-item, .list-item, .card, article, li a, a[href]"];
        for (const sel of selectors) {
          const els = Array.from(document.querySelectorAll(sel)).filter(isVisible);
          if (els.length) {
            els.sort((a,b) => a.getBoundingClientRect().top - b.getBoundingClientRect().top);
            return els.find(e => (e.innerText||"").trim().length > 1) || els[0];
          }
        }
        return null;
      }, "first search result");
      clickEl(firstResult);
      console.log("üìë clicked first result");
      await delay(3000);

      // 6. Click ASK logo (back to home)
      const askLogo = await waitFor(() => {
        const candidates = Array.from(document.querySelectorAll("a, button, img, div")).filter(isVisible)
          .filter(el => {
            const r = el.getBoundingClientRect();
            return r.top < 120 && r.left < 220;
          });
        const exact = candidates.find(el => /^\s*ASK\s*$/i.test((el.innerText||"")) || /ask/i.test((el.getAttribute("alt")||"") + (el.title||"")));
        return exact || candidates[0] || null;
      }, "ASK logo (top-left)");
      clickEl(askLogo);
      console.log("üè† clicked ASK logo (home)");
      await delay(3000);
    }
  } catch (err) {
    console.error("Automation stopped:", err);
  }
})();
